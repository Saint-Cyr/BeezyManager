<!DOCTYPE html>
<html ng-app="myApp">
<head>
  <title>POS1</title>
  <!--JS Dependencies -->
  <script src="{{ asset('pos2/angular.js') }}"></script>
  <script src="{{ asset('pos2/jquery.js') }}"></script>
  <script src="{{ asset('pos2/bootstrap.min.js') }}"></script>
  <script src="{{ asset('vendor/jquery.scannerdetection.js') }}"></script>
  <!--CSS Dependencies -->
  <link rel="stylesheet" href="{{ asset('pos2/style.css') }}" />
  <link rel="stylesheet" href="{{ asset('pos2/bootstrap.min.css') }}" />
  <link rel="stylesheet" href="{{ asset('css/font-awesome.min.css') }}"/>
  <link rel='shortcut icon' type='image/x-icon' href='{{ asset('images/favicon.ico') }}' />
  <script>
    // Code goes here
    var app = angular.module('myApp', []);
    app.controller('PosController', function ($scope, $http) {
    $scope.disableIt = false;
    $scope.gif = 'logo.png';
    
    $scope.food = {
      {% for p in products %}
            {% for stock in app.user.branch.stocks %}
                {# Rember only product that have stock value can be sold on POS2 #}
                        {% if stock.product.id == p.id and stock.tracked %}
                            "{{ p.barcode }}" : {count: 1, id: {{ p.id }}, detail: "{{ p.name|slice(0, 15)|e('js')|raw }}", price: {{ p.unitPrice }} },
                        {% endif %}
            {% endfor %} 
      {% endfor %}
    };
    
    $(document).scannerDetection({
	timeBeforeScanTest: 200, // wait for the next character for upto 200ms
	startChar: [120], // Prefix character for the cabled scanner (OPL6845R)
	endChar: [13], // be sure the scan is complete if key 13 (enter) is detected
	avgTimeByChar: 40, // it's not a barcode if a character takes longer than 40ms
	onComplete: function(barcode, qty){
            var item = $scope.food[barcode];
            //Make sure the barcode is loaded
            if(!item){
                var audioElement = document.createElement('audio');
                audioElement.setAttribute('src', '{{ asset('error.mp3') }}');
                audioElement.play();
                alert('Product not found.');
            }
            $scope.orderedItemCnt = 1;
            var foodItem = {
              orderedItemCnt : 1,
              totalPrice : item.price,
              itemId : item.id, 
              id : $scope.itemsCnt,
              item : item
            };
              // Find if the item is already in Cart
              var cartItems = $.grep($scope.order, function(e){ return e.itemId == item.id; });

               if(cartItems.length > 0  && !isEmpty($scope.order)){
                  cartItems[0].orderedItemCnt = ++ cartItems[0].orderedItemCnt; 
                  cartItems[0].totalPrice = item.price * cartItems[0].orderedItemCnt;
               }
               else{
                  $scope.order.push(foodItem);
                  $scope.itemsCnt = $scope.order.length; 
               }
               
               $scope.$apply();
               
            }        	
    });
    
    $scope.itemsCnt = 1;
    $scope.order = [];
    $scope.isDisabled = true;

    function isEmpty(obj) {
        return Object.keys(obj).length === 0;
    }

    $scope.addToOrder = function(item) {
      $scope.orderedItemCnt = 1;
      var foodItem = {
        orderedItemCnt : 1,
        totalPrice : item.price,
        itemId : item.id, 
        id : $scope.itemsCnt,
        item : item
      };

        // Find if the item is already in Cart
        var cartItems = $.grep($scope.order, function(e){ return e.itemId == item.id; });

         if(cartItems.length > 0  && !isEmpty($scope.order)){
            cartItems[0].orderedItemCnt = ++ cartItems[0].orderedItemCnt; 
            cartItems[0].totalPrice = item.price * cartItems[0].orderedItemCnt;
         }
         else{
            $scope.order.push(foodItem);
            $scope.itemsCnt = $scope.order.length; 
         }   
    };
    
    $scope.getSum = function() {
      var i = 0,
        sum = 0;

      for(; i < $scope.order.length; i++) {
        sum += parseInt($scope.order[i].totalPrice, 10);
      }
      return sum;
    };

    $scope.addItem = function(item, index) {         
          item.orderedItemCnt = ++ item.orderedItemCnt; 
          item.totalPrice = item.item.price * item.orderedItemCnt;
    };


    $scope.subtractItem = function(item, $index)
    {
      if(item.orderedItemCnt > 1) {
          item.orderedItemCnt = -- item.orderedItemCnt; 
          item.totalPrice = item.item.price * item.orderedItemCnt;
      }
      else{
        $scope.isDisabled = true;
        // isDisabled = false;    
        // $("#SubstractItemBtn").prop("disabled", true);
      }
    }

    $scope.removeItem = function(index) {
        $scope.order.splice(index, 1);
    
    };
    
    /*$scope.checkout = function(index) {
      alert("Order total: $" + $scope.getSum() + "\n\nPayment received. Thanks.");
    };*/
    
    $scope.checkout = function(index) {
       //Prevent user to send a second request
      
      //S@int-Cyr edition start here
      //Data to be sent to the server (order[])
      var order2 = $scope.order.slice(0);
      
      var data = {"data":{
          'id': 1,
          'order': order2,
          'total': $scope.getSum(),
    }};

    //Prevent user to send another request
      $scope.order = '';
      
      $scope.gif = 'gif1.gif';
      //Data containing the response from the server
      var outPut = $http.post('http://localhost/BeezyManager2/web/app_dev.php/sales/transactions', data);
      //alert( "successfull message: " + JSON.stringify({data: data}));
      //When successfull response comes from the server
      outPut.success(function(data, status, headers, config){
          alert(data);
          
          $scope.order = [];
          $scope.gif = 'logo.png';
      });
      
      outPut.error(function(data, status, header, config){
          alert('an error occur: cannot perform the transaction');
          
      });
      //S@int-Cyr edition end here
      
      //alert("Order total: $" + $scope.getSum() + "\n\nPayment received. Thanks. cache: " + $scope.cacheAmount + "change: " + $scope.getChange());
      //$scope.order = [];
    };
    
    $scope.clearOrder = function() {
      $scope.order = [];
    };
    
    $scope.getChange = function(){
            var change = 0;
            if($scope.getSum()){    
                change = $scope.cacheAmount - $scope.getSum();
                return change;
            }
            
            return change;
            alert('ok');
        }
});

// input
// Jquery Dependency

$(document).ready(function(){
  $("input#currency-field").bind('keyup mouseup', function () {
      formatCurrency($(this));        
  });
  $("input#currency-field").change(function(){
      // console.log('here1');
      // formatCurrency($(this));
      formatCurrency($(this), "blur");
  });

});



function formatNumber(n) {
  // format number 1000000 to 1,234,567
  return n.replace(/\D/g, "").replace(/\B(?=(\d{3})+(?!\d))/g, ",")
}


function formatCurrency(input, blur) {
  console.log('format');
  // appends $ to value, validates decimal side
  // and puts cursor back in right position.
  
  // get input value
  var input_val = input.val();
  
  // don't validate empty input
  if (input_val === "") { return; }
  
  // original length
  var original_len = input_val.length;

  // initial caret position 
  var caret_pos = input.prop("selectionStart");
    
  // check for decimal
  if (input_val.indexOf(".") >= 0) {

    // get position of first decimal
    // this prevents multiple decimals from
    // being entered
    var decimal_pos = input_val.indexOf(".");

    // split number by decimal point
    var left_side = input_val.substring(0, decimal_pos);
    var right_side = input_val.substring(decimal_pos);

    // add commas to left side of number
    left_side = formatNumber(left_side);

    // validate right side
    right_side = formatNumber(right_side);
    
    // On blur make sure 2 numbers after decimal
    if (blur === "blur") {
      right_side += "00";
    }
    
    // Limit decimal to only 2 digits
    right_side = right_side.substring(0, 2);

    // join number by .
    input_val = "$" + left_side + "." + right_side;

  } else {
    // no decimal entered
    // add commas to number
    // remove all non-digits
    input_val = formatNumber(input_val);
    input_val = "$" + input_val;
    
    // final formatting
    if (blur === "blur") {
      input_val += ".00";
    }
  }
  
  // send updated string to input
  input.val(input_val);

  // put caret back in the right position
  var updated_len = input_val.length;
  caret_pos = updated_len - original_len + caret_pos;
  input[0].setSelectionRange(caret_pos, caret_pos);
}
    </script>
<script>
    $(document).ready(function () {
        $("#myTab a").click(function (e) {
            e.preventDefault();
            $(this).tab('show');
        });
    });
    
    //this is to give focus to the cash input box when shift is pressed
    $(document).on('keyup keydown', function(e)
    {
        shifted = e.shiftKey;
        if(shifted){
            $("#input_left_bottom").focus();
        };   
    });
</script>
  <style>
    #modalContainer {
    background-color:rgba(0, 0, 0, 0.3);
    position:absolute;
    width:100%;
    height:100%;
    top:0px;
    left:0px;
    z-index:10000;
    background-image:url(tp.png); /* required by MSIE to prevent actions on lower z-index elements */
    }

    #alertBox {
        position:relative;
        width:300px;
        min-height:100px;
        margin-top:50px;
        border:1px solid #666;
        background-color:#fff;
        background-repeat:no-repeat;
        background-position:20px 30px;
    }

    #modalContainer > #alertBox {
        position:fixed;
    }

    #alertBox h1 {
        margin:0;
        font:bold 0.9em verdana,arial;
        background-color:#5e388f;
        color:#FFF;
        border-bottom:1px solid #000;
        padding:2px 0 2px 5px;
    }

    #alertBox p {
        font:0.7em verdana,arial;
        height:50px;
        padding-left:50px;
        margin-left: auto;
        margin-top: 20px;
        font-size: 18px;
    }

    #alertBox #closeBtn {
        display:block;
        position:relative;
        margin:5px auto;
        padding:7px;
        border:0 none;
        width:70px;
        font:0.7em verdana,arial;
        text-transform:uppercase;
        text-align:center;
        color:#FFF;
        background-color:#5e388f;
        border-radius: 3px;
        text-decoration:none;
    }

    /* unrelated styles */

    #mContainer {
        position:relative;
        width:600px;
        margin:auto;
        padding:5px;
        border-top:2px solid #000;
        border-bottom:2px solid #000;
        font:0.7em verdana,arial;
    }

    h1,h2 {
        margin:0;
        padding:4px;
        font:bold 1.5em verdana;
        border-bottom:1px solid #000;
    }

    code {
        font-size:1.2em;
        color:#069;
    }

    #credits {
        position:relative;
        margin:25px auto 0px auto;
        width:350px; 
        font:0.7em verdana;
        border-top:1px solid #000;
        border-bottom:1px solid #000;
        height:90px;
        padding-top:4px;
    }

    #credits img {
        float:left;
        margin:5px 10px 5px 0px;
        border:1px solid #000000;
        width:80px;
        height:79px;
    }

    .important {
        background-color:#F5FCC8;
        padding:2px;
    }

    code span {
        color:green;
    }
  </style>
</head>
<body data-ng-controller="PosController"  style="background-color:#eee;">
  <!--  <div class="col-md-12">
         <img src="bsol_logo.jpg" alt="Cinque Terre" width="102" height="48" class="img-rounded logo-small center-block">
    </div>-->
    <div class="col-md-12">
        <div class="row">
            <div>
                <div class="col-md-6">
                {% verbatim %}
		<!--<span  style="font-size: 100px; color: #e81e26;">{{getTotal() | currency:" ":0}}</span>-->
                <span  style="font-size: 100px; color: #e81e26;">
                    {{getSum() | currency:" ":0}}
                </span>
                <span  style="font-size: 20px; color: #e81e26;">
                    FCFA (TTC)
                </span>
                
                </div>
		<div class="col-md-6">
		<span  style="font-size: 80px; color: gray;">
                    {{ cacheAmount - getSum() | currency:" ":0}}
                </span>
                <span  style="font-size: 20px; color: gray;">
                    FCFA (RELICA)
                </span>
                </div>
                {% endverbatim %}
            </div>
        </div>
    </div>
    <div class="col-md-12">
        <div class="row">
            <div class="col-md-6">
                <div class="panel panel-primary">
                    
                    <div class="panel-body" style="max-height:650px; overflow:auto; min-height:650px;">
                        <div class="text-warning" ng-hide="order.length" style="margin-top:18%">        
                            <img src="{{ asset('images/logo2.jpg') }}" class="center-block" width="320"/>
                        </div>
                        {% verbatim %}
                        <ul class="list-group">
                            <li class="list-group-item" ng-repeat="item in order">
                                <div class="row"  style="font-size:25px;">
                                    <div class="col-md-1">
                                        <span class="badge badge-left" ng-bind="item.orderedItemCnt" style="font-size:25px;"></span>
                                    </div>
                                    <div class="col-md-4">
                                        {{ item.item.detail }}
                                    </div>
                                    <div class="col-md-1 col-md-push-1">
                                        <div class="" style="color: red;">{{item.totalPrice | currency:"":0}}</div>
                                    </div>
                                    <div class="col-md-3 col-md-push-3">
                                        <button class="btn btn-xs" ng-click="addItem(item, $index)">
                                            <span class="fa fa-plus" style="font-size:25px;"></span>
                                        </button>
                                        <button class="btn btn-xs" ng-click="subtractItem(item, $index)">
                                            <span class="fa fa-minus" style="font-size:25px;"></span>
                                        </button>
                                    </div>
                                    <div class="col-md-1 col-md-push-2">
                                        <button class="btn btn-xs" ng-click="removeItem(item)">
                                            <span class="fa fa-trash-o" style="font-size:25px;"></span>
                                        </button>
                                    </div>
                                </div>
                            </li>
                        </ul>
                    </div>
                </div>
                {% endverbatim %}
            </div>
            <div class="col-md-6">
                <div class="panel panel-primary" style="max-height:650px; overflow:auto; min-height:650px;">
                <style>
                    .panel {
                        border-color : #f00;
                    }
                </style>
                    
                    <div class="panel-body">
			<div role="tabpanel" class="tab-pane" id="food">
                            {% for p in products %}
                                <button class="btn-huge2" ng-click="addToOrder(food.{{ p.barcode }})">
                                    {{ p | slice(0, 6) | upper }}
                                </button>
                            {% endfor %}
                            
                            <button class="btn-huge2" ng-click="addToOrder(product.1)">A</button>
                            <button class="btn-huge2" ng-click="addToOrder(product.1)">A</button>
                            <button class="btn-huge2" ng-click="addToOrder(product.1)">A</button>
                            <button class="btn-huge2" ng-click="addToOrder(product.1)">A</button>
                            <button class="btn-huge2" ng-click="addToOrder(product.1)">A</button>
                            
                        </div>
                        <!--<div role="tabpanel" class="tab-pane" id="food">
                            <img src="bsol_logo.jpg" class="product-image" data-ng-click="addToOrder(1)"/>
                            <img src="bsol_logo.jpg" class="product-image" data-ng-click="addToOrder(1)"/>
                            <img src="bsol_logo.jpg" class="product-image" data-ng-click="addToOrder(1)"/>
                            <img src="bsol_logo.jpg" class="product-image" data-ng-click="addToOrder(1)"/>
                            <img src="bsol_logo.jpg" class="product-image" data-ng-click="addToOrder(1)"/>
                        </div>-->                    
                    </div>
                    </div>
                </div>
                </div>
                <div class="col-md-1 custom-icon">
                    <span class="fa fa-trash-o" style="margin-left: 23px;" ng-click="clearOrder()"></span>
                </div>
                <div class="col-md-5">
                <span class="btn btn-danger lg btn-checkout" ng-click="checkout()" ng-disabled="!order.length" style="font-size: 32px;">
                    CHECKOUT
                </span>
                </div>
                <div class="col-md-5">
                    <form onsubmit="alert('ok---');">
                        <input type="text" name="currency-field" id="input_left_bottom" value="" data-type="currency"
			placeholder="CASH (FCFA)" autocomplete="off" ng-model="cacheAmount" class="btn-huge"/>
                    </form>
                </div>
                <div class="col-md-1 custom-icon">
                    <a href="{{ path('km_front') }}">
                        <span class="fa fa-bars" style="margin-left: 23px; color: #c4333b;" ng-click=""></span>
                    </a>
                </div>
        </div>
    </div>
</body>
</html>
